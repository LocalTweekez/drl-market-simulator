if(code == 0) {
return "ERR_SUCCESS: The operation completed successfully"; }
if(code == 4001) {
return "ERR_INTERNAL_ERROR: Unexpected internal error"; }
if(code == 4002) {
return "ERR_WRONG_INTERNAL_PARAMETER: Wrong parameter in the inner call of the client terminal function"; }
if(code == 4003) {
return "ERR_INVALID_PARAMETER: Wrong parameter when calling the system function"; }
if(code == 4004) {
return "ERR_NOT_ENOUGH_MEMORY: Not enough memory to perform the system function"; }
if(code == 4005) {
return "ERR_STRUCT_WITHOBJECTS_ORCLASS: The structure contains objects of strings and/or dynamic arrays and/or structure of such objects and/or classes"; }
if(code == 4006) {
return "ERR_INVALID_ARRAY: Array of a wrong type, wrong size, or a damaged object of a dynamic array"; }
if(code == 4007) {
return "ERR_ARRAY_RESIZE_ERROR: Not enough memory for the relocation of an array, or an attempt to change the size of a static array"; }
if(code == 4008) {
return "ERR_STRING_RESIZE_ERROR: Not enough memory for the relocation of string"; }
if(code == 4009) {
return "ERR_NOTINITIALIZED_STRING: Not initialized string"; }
if(code == 4010) {
return "ERR_INVALID_DATETIME: Invalid date and/or time"; }
if(code == 4011) {
return "ERR_ARRAY_BAD_SIZE: Total amount of elements in the array cannot exceed 2147483647"; }
if(code == 4012) {
return "ERR_INVALID_POINTER: Wrong pointer"; }
if(code == 4013) {
return "ERR_INVALID_POINTER_TYPE: Wrong type of pointer"; }
if(code == 4014) {
return "ERR_FUNCTION_NOT_ALLOWED: Function is not allowed for call"; }
if(code == 4015) {
return "ERR_RESOURCE_NAME_DUPLICATED: The names of the dynamic and the static resource match"; }
if(code == 4016) {
return "ERR_RESOURCE_NOT_FOUND: Resource with this name has not been found in EX5"; }
if(code == 4017) {
return "ERR_RESOURCE_UNSUPPORTED_TYPE: Unsupported resource type or its size exceeds 16 Mb"; }
if(code == 4018) {
return "ERR_RESOURCE_NAME_IS_TOO_LONG: The resource name exceeds 63 characters"; }
if(code == 4019) {
return "ERR_MATH_OVERFLOW: Overflow occurred when calculating math function"; }
if(code == 4020) {
return "ERR_SLEEP_ERROR: Out of test end date after calling Sleep()"; }
if(code == 4022) {
return "ERR_PROGRAM_STOPPED: Test forcibly stopped from the outside. For example, optimization interrupted, visual testing window closed or testing agent stopped"; }
if(code == 4023) {
return "ERR_INVALID_TYPE: Invalid type"; }
if(code == 4024) {
return "ERR_INVALID_HANDLE: Invalid handle"; }
if(code == 4025) {
return "ERR_TOO_MANY_OBJECTS: Object pool filled out"; }
if(code == 4101) {
return "ERR_CHART_WRONG_ID: Wrong chart ID"; }
if(code == 4102) {
return "ERR_CHART_NO_REPLY: Chart does not respond"; }
if(code == 4103) {
return "ERR_CHART_NOT_FOUND: Chart not found"; }
if(code == 4104) {
return "ERR_CHART_NO_EXPERT: No Expert Advisor in the chart that could handle the event"; }
if(code == 4105) {
return "ERR_CHART_CANNOT_OPEN: Chart opening error"; }
if(code == 4106) {
return "ERR_CHART_CANNOT_CHANGE: Failed to change chart symbol and period"; }
if(code == 4107) {
return "ERR_CHART_WRONG_PARAMETER: Error value of the parameter for the function of working with charts"; }
if(code == 4108) {
return "ERR_CHART_CANNOT_CREATE_TIMER: Failed to create timer"; }
if(code == 4109) {
return "ERR_CHART_WRONG_PROPERTY: Wrong chart property ID"; }
if(code == 4110) {
return "ERR_CHART_SCREENSHOT_FAILED: Error creating screenshots"; }
if(code == 4111) {
return "ERR_CHART_NAVIGATE_FAILED: Error navigating through chart"; }
if(code == 4112) {
return "ERR_CHART_TEMPLATE_FAILED: Error applying template"; }
if(code == 4113) {
return "ERR_CHART_WINDOW_NOT_FOUND: Subwindow containing the indicator was not found"; }
if(code == 4114) {
return "ERR_CHART_INDICATOR_CANNOT_ADD: Error adding an indicator to chart"; }
if(code == 4115) {
return "ERR_CHART_INDICATOR_CANNOT_DEL: Error deleting an indicator from the chart"; }
if(code == 4116) {
return "ERR_CHART_INDICATOR_NOT_FOUND: Indicator not found on the specified chart"; }
if(code == 4201) {
return "ERR_OBJECT_ERROR: Error working with a graphical object"; }
if(code == 4202) {
return "ERR_OBJECT_NOT_FOUND: Graphical object was not found"; }
if(code == 4203) {
return "ERR_OBJECT_WRONG_PROPERTY: Wrong ID of a graphical object property"; }
if(code == 4204) {
return "ERR_OBJECT_GETDATE_FAILED: Unable to get date corresponding to the value"; }
if(code == 4205) {
return "ERR_OBJECT_GETVALUE_FAILED: Unable to get value corresponding to the date"; }
if(code == 4301) {
return "ERR_MARKET_UNKNOWN_SYMBOL: Unknown symbol"; }
if(code == 4302) {
return "ERR_MARKET_NOT_SELECTED: Symbol is not selected in MarketWatch"; }
if(code == 4303) {
return "ERR_MARKET_WRONG_PROPERTY: Wrong identifier of a symbol property"; }
if(code == 4304) {
return "ERR_MARKET_LASTTIME_UNKNOWN: Time of the last tick is not known (no ticks)"; }
if(code == 4305) {
return "ERR_MARKET_SELECT_ERROR: Error adding or deleting a symbol in MarketWatch"; }
if(code == 4306) {
return "ERR_MARKET_SELECT_LIMIT: Exceeded the limit of selected symbols in MarketWatch"; }
if(code == 4307) {
return "ERR_MARKET_SESSION_INDEX: Wrong session ID when calling the SymbolInfoSessionQuote/SymbolInfoSessionTrade function"; }
if(code == 4401) {
return "ERR_HISTORY_NOT_FOUND: Requested history not found"; }
if(code == 4402) {
return "ERR_HISTORY_WRONG_PROPERTY: Wrong ID of the history property"; }
if(code == 4403) {
return "ERR_HISTORY_TIMEOUT: Exceeded history request timeout"; }
if(code == 4404) {
return "ERR_HISTORY_BARS_LIMIT: Number of requested bars limited by terminal settings"; }
if(code == 4405) {
return "ERR_HISTORY_LOAD_ERRORS: Multiple errors when loading history"; }
if(code == 4407) {
return "ERR_HISTORY_SMALL_BUFFER: Receiving array is too small to store all requested data"; }
if(code == 4501) {
return "ERR_GLOBALVARIABLE_NOT_FOUND: Global variable of the client terminal is not found"; }
if(code == 4502) {
return "ERR_GLOBALVARIABLE_EXISTS: Global variable of the client terminal with the same name already exists"; }
if(code == 4503) {
return "ERR_GLOBALVARIABLE_NOT_MODIFIED: Global variables were not modified"; }
if(code == 4504) {
return "ERR_GLOBALVARIABLE_CANNOTREAD: Cannot read file with global variable values"; }
if(code == 4505) {
return "ERR_GLOBALVARIABLE_CANNOTWRITE: Cannot write file with global variable values"; }
if(code == 4510) {
return "ERR_MAIL_SEND_FAILED: Email sending failed"; }
if(code == 4511) {
return "ERR_PLAY_SOUND_FAILED: Sound playing failed"; }
if(code == 4512) {
return "ERR_MQL5_WRONG_PROPERTY: Wrong identifier of the program property"; }
if(code == 4513) {
return "ERR_TERMINAL_WRONG_PROPERTY: Wrong identifier of the terminal property"; }
if(code == 4514) {
return "ERR_FTP_SEND_FAILED: File sending via ftp failed"; }
if(code == 4515) {
return "ERR_NOTIFICATION_SEND_FAILED: Failed to send a notification"; }
if(code == 4516) {
return "ERR_NOTIFICATION_WRONG_PARAMETER: Invalid parameter for sending a notification â€“ an empty string or NULL has been passed to the SendNotification() function"; }
if(code == 4517) {
return "ERR_NOTIFICATION_WRONG_SETTINGS: Wrong settings of notifications in the terminal (ID is not specified or permission is not set)"; }
if(code == 4518) {
return "ERR_NOTIFICATION_TOO_FREQUENT: Too frequent sending of notifications"; }
if(code == 4519) {
return "ERR_FTP_NOSERVER: FTP server is not specified"; }
if(code == 4520) {
return "ERR_FTP_NOLOGIN: FTP login is not specified"; }
if(code == 4521) {
return "ERR_FTP_FILE_ERROR: File not found in the MQL5\Files directory to send on FTP server"; }
if(code == 4522) {
return "ERR_FTP_CONNECT_FAILED: FTP connection failed"; }
if(code == 4523) {
return "ERR_FTP_CHANGEDIR: FTP path not found on server"; }
if(code == 4601) {
return "ERR_BUFFERS_NO_MEMORY: Not enough memory for the distribution of indicator buffers"; }
if(code == 4602) {
return "ERR_BUFFERS_WRONG_INDEX: Wrong indicator buffer index"; }
if(code == 4603) {
return "ERR_CUSTOM_WRONG_PROPERTY: Wrong ID of the custom indicator property"; }
if(code == 4701) {
return "ERR_ACCOUNT_WRONG_PROPERTY: Wrong account property ID"; }
if(code == 4751) {
return "ERR_TRADE_WRONG_PROPERTY: Wrong trade property ID"; }
if(code == 4752) {
return "ERR_TRADE_DISABLED: Trading by Expert Advisors prohibited"; }
if(code == 4753) {
return "ERR_TRADE_POSITION_NOT_FOUND: Position not found"; }
if(code == 4754) {
return "ERR_TRADE_ORDER_NOT_FOUND: Order not found"; }
if(code == 4755) {
return "ERR_TRADE_DEAL_NOT_FOUND: Deal not found"; }
if(code == 4756) {
return "ERR_TRADE_SEND_FAILED: Trade request sending failed"; }
if(code == 4758) {
return "ERR_TRADE_CALC_FAILED: Failed to calculate profit or margin"; }
if(code == 4801) {
return "ERR_INDICATOR_UNKNOWN_SYMBOL: Unknown symbol"; }
if(code == 4802) {
return "ERR_INDICATOR_CANNOT_CREATE: Indicator cannot be created"; }
if(code == 4803) {
return "ERR_INDICATOR_NO_MEMORY: Not enough memory to add the indicator"; }
if(code == 4804) {
return "ERR_INDICATOR_CANNOT_APPLY: The indicator cannot be applied to another indicator"; }
if(code == 4805) {
return "ERR_INDICATOR_CANNOT_ADD: Error applying an indicator to chart"; }
if(code == 4806) {
return "ERR_INDICATOR_DATA_NOT_FOUND: Requested data not found"; }
if(code == 4807) {
return "ERR_INDICATOR_WRONG_HANDLE: Wrong indicator handle"; }
if(code == 4808) {
return "ERR_INDICATOR_WRONG_PARAMETERS: Wrong number of parameters when creating an indicator"; }
if(code == 4809) {
return "ERR_INDICATOR_PARAMETERS_MISSING: No parameters when creating an indicator"; }
if(code == 4810) {
return "ERR_INDICATOR_CUSTOM_NAME: The first parameter in the array must be the name of the custom indicator"; }
if(code == 4811) {
return "ERR_INDICATOR_PARAMETER_TYPE: Invalid parameter type in the array when creating an indicator"; }
if(code == 4812) {
return "ERR_INDICATOR_WRONG_INDEX: Wrong index of the requested indicator buffer"; }
if(code == 4901) {
return "ERR_BOOKS_CANNOT_ADD: Depth Of Market can not be added"; }
if(code == 4902) {
return "ERR_BOOKS_CANNOT_DELETE: Depth Of Market can not be removed"; }
if(code == 4903) {
return "ERR_BOOKS_CANNOT_GET: The data from Depth Of Market can not be obtained"; }
if(code == 4904) {
return "ERR_BOOKS_CANNOT_SUBSCRIBE: Error in subscribing to receive new data from Depth Of Market"; }
if(code == 5001) {
return "ERR_TOO_MANY_FILES: More than 64 files cannot be opened at the same time"; }
if(code == 5002) {
return "ERR_WRONG_FILENAME: Invalid file name"; }
if(code == 5003) {
return "ERR_TOO_LONG_FILENAME: Too long file name"; }
if(code == 5004) {
return "ERR_CANNOT_OPEN_FILE: File opening error"; }
if(code == 5005) {
return "ERR_FILE_CACHEBUFFER_ERROR: Not enough memory for cache to read"; }
if(code == 5006) {
return "ERR_CANNOT_DELETE_FILE: File deleting error"; }
if(code == 5007) {
return "ERR_INVALID_FILEHANDLE: A file with this handle was closed, or was not opening at all"; }
if(code == 5008) {
return "ERR_WRONG_FILEHANDLE: Wrong file handle"; }
if(code == 5009) {
return "ERR_FILE_NOTTOWRITE: The file must be opened for writing"; }
if(code == 5010) {
return "ERR_FILE_NOTTOREAD: The file must be opened for reading"; }
if(code == 5011) {
return "ERR_FILE_NOTBIN: The file must be opened as a binary one"; }
if(code == 5012) {
return "ERR_FILE_NOTTXT: The file must be opened as a text"; }
if(code == 5013) {
return "ERR_FILE_NOTTXTORCSV: The file must be opened as a text or CSV"; }
if(code == 5014) {
return "ERR_FILE_NOTCSV: The file must be opened as CSV"; }
if(code == 5015) {
return "ERR_FILE_READERROR: File reading error"; }
if(code == 5016) {
return "ERR_FILE_BINSTRINGSIZE: String size must be specified, because the file is opened as binary"; }
if(code == 5017) {
return "ERR_INCOMPATIBLE_FILE: A text file must be for string arrays, for other arrays - binary"; }
if(code == 5018) {
return "ERR_FILE_IS_DIRECTORY: This is not a file, this is a directory"; }
if(code == 5019) {
return "ERR_FILE_NOT_EXIST: File does not exist"; }
if(code == 5020) {
return "ERR_FILE_CANNOT_REWRITE: File can not be rewritten"; }
if(code == 5021) {
return "ERR_WRONG_DIRECTORYNAME: Wrong directory name"; }
if(code == 5022) {
return "ERR_DIRECTORY_NOT_EXIST: Directory does not exist"; }
if(code == 5023) {
return "ERR_FILE_ISNOT_DIRECTORY: This is a file, not a directory"; }
if(code == 5024) {
return "ERR_CANNOT_DELETE_DIRECTORY: The directory cannot be removed"; }
if(code == 5025) {
return "ERR_CANNOT_CLEAN_DIRECTORY: Failed to clear the directory (probably one or more files are blocked and removal operation failed)"; }
if(code == 5026) {
return "ERR_FILE_WRITEERROR: Failed to write a resource to a file"; }
if(code == 5027) {
return "ERR_FILE_ENDOFFILE: Unable to read the next piece of data from a CSV file (FileReadString, FileReadNumber, FileReadDatetime, FileReadBool), since the end of file is reached"; }
if(code == 5030) {
return "ERR_NO_STRING_DATE: No date in the string"; }
if(code == 5031) {
return "ERR_WRONG_STRING_DATE: Wrong date in the string"; }
if(code == 5032) {
return "ERR_WRONG_STRING_TIME: Wrong time in the string"; }
if(code == 5033) {
return "ERR_STRING_TIME_ERROR: Error converting string to date"; }
if(code == 5034) {
return "ERR_STRING_OUT_OF_MEMORY: Not enough memory for the string"; }
if(code == 5035) {
return "ERR_STRING_SMALL_LEN: The string length is less than expected"; }
if(code == 5036) {
return "ERR_STRING_TOO_BIGNUMBER: Too large number, more than ULONG_MAX"; }
if(code == 5037) {
return "ERR_WRONG_FORMATSTRING: Invalid format string"; }
if(code == 5038) {
return "ERR_TOO_MANY_FORMATTERS: Amount of format specifiers more than the parameters"; }
if(code == 5039) {
return "ERR_TOO_MANY_PARAMETERS: Amount of parameters more than the format specifiers"; }
if(code == 5040) {
return "ERR_WRONG_STRING_PARAMETER: Damaged parameter of string type"; }
if(code == 5041) {
return "ERR_STRINGPOS_OUTOFRANGE: Position outside the string"; }
if(code == 5042) {
return "ERR_STRING_ZEROADDED: 0 added to the string end, a useless operation"; }
if(code == 5043) {
return "ERR_STRING_UNKNOWNTYPE: Unknown data type when converting to a string"; }
if(code == 5044) {
return "ERR_WRONG_STRING_OBJECT: Damaged string object"; }
if(code == 5050) {
return "ERR_INCOMPATIBLE_ARRAYS: Copying incompatible arrays. String array can be copied only to a string array, and a numeric array - in numeric array only"; }
if(code == 5051) {
return "ERR_SMALL_ASSERIES_ARRAY: The receiving array is declared as AS_SERIES, and it is of insufficient size"; }
if(code == 5052) {
return "ERR_SMALL_ARRAY: Too small array, the starting position is outside the array"; }
if(code == 5053) {
return "ERR_ZEROSIZE_ARRAY: An array of zero length"; }
if(code == 5054) {
return "ERR_NUMBER_ARRAYS_ONLY: Must be a numeric array"; }
if(code == 5055) {
return "ERR_ONEDIM_ARRAYS_ONLY: Must be a one-dimensional array"; }
if(code == 5056) {
return "ERR_SERIES_ARRAY: Timeseries cannot be used"; }
if(code == 5057) {
return "ERR_DOUBLE_ARRAY_ONLY: Must be an array of type double"; }
if(code == 5058) {
return "ERR_FLOAT_ARRAY_ONLY: Must be an array of type float"; }
if(code == 5059) {
return "ERR_LONG_ARRAY_ONLY: Must be an array of type long"; }
if(code == 5060) {
return "ERR_INT_ARRAY_ONLY: Must be an array of type int"; }
if(code == 5061) {
return "ERR_SHORT_ARRAY_ONLY: Must be an array of type short"; }
if(code == 5062) {
return "ERR_CHAR_ARRAY_ONLY: Must be an array of type char"; }
if(code == 5063) {
return "ERR_STRING_ARRAY_ONLY: String array only"; }
if(code == 5100) {
return "ERR_OPENCL_NOT_SUPPORTED: OpenCL functions are not supported on this computer"; }
if(code == 5101) {
return "ERR_OPENCL_INTERNAL: Internal error occurred when running OpenCL"; }
if(code == 5102) {
return "ERR_OPENCL_INVALID_HANDLE: Invalid OpenCL handle"; }
if(code == 5103) {
return "ERR_OPENCL_CONTEXT_CREATE: Error creating the OpenCL context"; }
if(code == 5104) {
return "ERR_OPENCL_QUEUE_CREATE: Failed to create a run queue in OpenCL"; }
if(code == 5105) {
return "ERR_OPENCL_PROGRAM_CREATE: Error occurred when compiling an OpenCL program"; }
if(code == 5106) {
return "ERR_OPENCL_TOO_LONG_KERNEL_NAME: Too long kernel name (OpenCL kernel)"; }
if(code == 5107) {
return "ERR_OPENCL_KERNEL_CREATE: Error creating an OpenCL kernel"; }
if(code == 5108) {
return "ERR_OPENCL_SET_KERNEL_PARAMETER: Error occurred when setting parameters for the OpenCL kernel"; }
if(code == 5109) {
return "ERR_OPENCL_EXECUTE: OpenCL program runtime error"; }
if(code == 5110) {
return "ERR_OPENCL_WRONG_BUFFER_SIZE: Invalid size of the OpenCL buffer"; }
if(code == 5111) {
return "ERR_OPENCL_WRONG_BUFFER_OFFSET: Invalid offset in the OpenCL buffer"; }
if(code == 5112) {
return "ERR_OPENCL_BUFFER_CREATE: Failed to create an OpenCL buffer"; }
if(code == 5113) {
return "ERR_OPENCL_TOO_MANY_OBJECTS: Too many OpenCL objects"; }
if(code == 5114) {
return "ERR_OPENCL_SELECTDEVICE: OpenCL device selection error"; }
if(code == 5120) {
return "ERR_DATABASE_INTERNAL: Internal database error"; }
if(code == 5121) {
return "ERR_DATABASE_INVALID_HANDLE: Invalid database handle"; }
if(code == 5122) {
return "ERR_DATABASE_TOO_MANY_OBJECTS: Exceeded the maximum acceptable number of Database objects"; }
if(code == 5123) {
return "ERR_DATABASE_CONNECT: Database connection error"; }
if(code == 5124) {
return "ERR_DATABASE_EXECUTE: Request execution error"; }
if(code == 5125) {
return "ERR_DATABASE_PREPARE: Request generation error"; }
if(code == 5126) {
return "ERR_DATABASE_NO_MORE_DATA: No more data to read"; }
if(code == 5127) {
return "ERR_DATABASE_STEP: Failed to move to the next request entry"; }
if(code == 5128) {
return "ERR_DATABASE_NOT_READY: Data for reading request results are not ready yet"; }
if(code == 5129) {
return "ERR_DATABASE_BIND_PARAMETERS: Failed to auto substitute parameters to an SQL request"; }
if(code == 5200) {
return "ERR_WEBREQUEST_INVALID_ADDRESS: Invalid URL"; }
if(code == 5201) {
return "ERR_WEBREQUEST_CONNECT_FAILED: Failed to connect to specified URL"; }
if(code == 5202) {
return "ERR_WEBREQUEST_TIMEOUT: Timeout exceeded"; }
if(code == 5203) {
return "ERR_WEBREQUEST_REQUEST_FAILED: HTTP request failed"; }
if(code == 5270) {
return "ERR_NETSOCKET_INVALIDHANDLE: Invalid socket handle passed to function"; }
if(code == 5271) {
return "ERR_NETSOCKET_TOO_MANY_OPENED: Too many open sockets (max 128)"; }
if(code == 5272) {
return "ERR_NETSOCKET_CANNOT_CONNECT: Failed to connect to remote host"; }
if(code == 5273) {
return "ERR_NETSOCKET_IO_ERROR: Failed to send/receive data from socket"; }
if(code == 5274) {
return "ERR_NETSOCKET_HANDSHAKE_FAILED: Failed to establish secure connection (TLS Handshake)"; }
if(code == 5275) {
return "ERR_NETSOCKET_NO_CERTIFICATE: No data on certificate protecting the connection"; }
if(code == 5300) {
return "ERR_NOT_CUSTOM_SYMBOL: A custom symbol must be specified"; }
if(code == 5301) {
return "ERR_CUSTOM_SYMBOL_WRONG_NAME: The name of the custom symbol is invalid. The symbol name can only contain Latin letters without punctuation, spaces or special characters (may only contain ".", "_", "&" and "#"). It is not recommended to use characters <, >, :, ", /,\, |, ?, *."; }
if(code == 5302) {
return "ERR_CUSTOM_SYMBOL_NAME_LONG: The name of the custom symbol is too long. The length of the symbol name must not exceed 32 characters including the ending 0 character"; }
if(code == 5303) {
return "ERR_CUSTOM_SYMBOL_PATH_LONG: The path of the custom symbol is too long. The path length should not exceed 128 characters including "Custom\\", the symbol name, group separators and the ending 0"; }
if(code == 5304) {
return "ERR_CUSTOM_SYMBOL_EXIST: A custom symbol with the same name already exists"; }
if(code == 5305) {
return "ERR_CUSTOM_SYMBOL_ERROR: Error occurred while creating, deleting or changing the custom symbol"; }
if(code == 5306) {
return "ERR_CUSTOM_SYMBOL_SELECTED: You are trying to delete a custom symbol selected in Market Watch"; }
if(code == 5307) {
return "ERR_CUSTOM_SYMBOL_PROPERTY_WRONG: An invalid custom symbol property"; }
if(code == 5308) {
return "ERR_CUSTOM_SYMBOL_PARAMETER_ERROR: A wrong parameter while setting the property of a custom symbol"; }
if(code == 5309) {
return "ERR_CUSTOM_SYMBOL_PARAMETER_LONG: A too long string parameter while setting the property of a custom symbol"; }
if(code == 5310) {
return "ERR_CUSTOM_TICKS_WRONG_ORDER: Ticks in the array are not arranged in the order of time"; }
if(code == 5400) {
return "ERR_CALENDAR_MORE_DATA: Array size is insufficient for receiving descriptions of all values"; }
if(code == 5401) {
return "ERR_CALENDAR_TIMEOUT: Request time limit exceeded"; }
if(code == 5402) {
return "ERR_CALENDAR_NO_DATA: Country is not found"; }
if(code == 5601) {
return "ERR_DATABASE_ERROR: Generic error"; }
if(code == 5602) {
return "ERR_DATABASE_LOGIC: SQLite internal logic error"; }
if(code == 5603) {
return "ERR_DATABASE_PERM: Access denied"; }
if(code == 5604) {
return "ERR_DATABASE_ABORT: Callback routine requested abort"; }
if(code == 5605) {
return "ERR_DATABASE_BUSY: Database file locked"; }
if(code == 5606) {
return "ERR_DATABASE_LOCKED: Database table locked"; }
if(code == 5607) {
return "ERR_DATABASE_NOMEM: Insufficient memory for completing operation"; }
if(code == 5608) {
return "ERR_DATABASE_READONLY: Attempt to write to readonly database"; }
if(code == 5609) {
return "ERR_DATABASE_INTERRUPT: Operation terminated by sqlite3_interrupt()"; }
if(code == 5610) {
return "ERR_DATABASE_IOERR: Disk I/O error"; }
if(code == 5611) {
return "ERR_DATABASE_CORRUPT: Database disk image corrupted"; }
if(code == 5612) {
return "ERR_DATABASE_NOTFOUND: Unknown operation code in sqlite3_file_control()"; }
if(code == 5613) {
return "ERR_DATABASE_FULL: Insertion failed because database is full"; }
if(code == 5614) {
return "ERR_DATABASE_CANTOPEN: Unable to open the database file"; }
if(code == 5615) {
return "ERR_DATABASE_PROTOCOL: Database lock protocol error"; }
if(code == 5616) {
return "ERR_DATABASE_EMPTY: Internal use only"; }
if(code == 5617) {
return "ERR_DATABASE_SCHEMA: Database schema changed"; }
if(code == 5618) {
return "ERR_DATABASE_TOOBIG: String or BLOB exceeds size limit"; }
if(code == 5619) {
return "ERR_DATABASE_CONSTRAINT: Abort due to constraint violation"; }
if(code == 5620) {
return "ERR_DATABASE_MISMATCH: Data type mismatch"; }
if(code == 5621) {
return "ERR_DATABASE_MISUSE: Library used incorrectly"; }
if(code == 5622) {
return "ERR_DATABASE_NOLFS: Uses OS features not supported on host"; }
if(code == 5623) {
return "ERR_DATABASE_AUTH: Authorization denied"; }
if(code == 5624) {
return "ERR_DATABASE_FORMAT: Not used"; }
if(code == 5625) {
return "ERR_DATABASE_RANGE: Bind parameter error, incorrect index"; }
if(code == 5626) {
return "ERR_DATABASE_NOTADB: File opened that is not database file"; }
if(code == 5700) {
return "ERR_MATRIX_INTERNAL: Internal error of the matrix/vector executing subsystem"; }
if(code == 5701) {
return "ERR_MATRIX_NOT_INITIALIZED: Matrix/vector not initialized"; }
if(code == 5702) {
return "ERR_MATRIX_INCONSISTENT: Inconsistent size of matrices/vectors in operation"; }
if(code == 5703) {
return "ERR_MATRIX_INVALID_SIZE: Invalid matrix/vector size"; }
if(code == 5704) {
return "ERR_MATRIX_INVALID_TYPE: Invalid matrix/vector type"; }
if(code == 5705) {
return "ERR_MATRIX_FUNC_NOT_ALLOWED: Function not available for this matrix/vector"; }
if(code == 5706) {
return "ERR_MATRIX_CONTAINS_NAN: Matrix/vector contains non-numbers (Nan/Inf)"; }
if(code == 5800) {
return "ERR_ONNX_INTERNAL: ONNX internal error"; }
if(code == 5801) {
return "ERR_ONNX_NOT_INITIALIZED: ONNX Runtime API initialization error"; }
if(code == 5802) {
return "ERR_ONNX_NOT_SUPPORTED: Property or value not supported by MQL5"; }
if(code == 5803) {
return "ERR_ONNX_RUN_FAILED: ONNX runtime API run error"; }
if(code == 5804) {
return "ERR_ONNX_INVALID_PARAMETERS_COUNT: Invalid number of parameters passed to OnnxRun"; }
if(code == 5805) {
return "ERR_ONNX_INVALID_PARAMETER: Invalid parameter value"; }
if(code == 5806) {
return "ERR_ONNX_INVALID_PARAMETER_TYPE: Invalid parameter type"; }
if(code == 5807) {
return "ERR_ONNX_INVALID_PARAMETER_SIZE: Invalid parameter size"; }
if(code == 5808) {
return "ERR_ONNX_WRONG_DIMENSION: Tensor dimension not set or invalid"; }
if(code == 65536) {
return "ERR_USER_ERROR_FIRST: User defined errors start with this code"; }
